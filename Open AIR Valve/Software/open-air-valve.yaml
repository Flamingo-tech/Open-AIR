esphome:
  name: "open-air-valve-x"
  name_add_mac_suffix: true
  platform: ESP32
  board: esp32dev

  on_boot:
    - priority: 700
      then:
      - stepper.set_acceleration:
          id: my_stepper
          acceleration: inf
      - stepper.set_deceleration:
          id: my_stepper
          deceleration: inf
      - stepper.report_position:
          id: my_stepper
          position: 0
      - stepper.set_target:
          id: my_stepper
          target: !lambda 'return id(valve_capacity_lookup_table)[10];'
      - wait_until:
          condition:
            lambda:
              return id(my_stepper).current_position == id(my_stepper).target_position;
      - stepper.set_speed:
          id: my_stepper
          speed: 150 steps/s
      - if:
          condition:
            binary_sensor.is_off: valve_homing_switch
          then:
          - while:
              condition:
                binary_sensor.is_off: valve_homing_switch
              then:
                - stepper.report_position:
                    id: my_stepper
                    position: 0
                - stepper.set_target:
                    id: my_stepper
                    target: -1
                - wait_until:
                    condition:
                      lambda:
                        return id(my_stepper).current_position <= id(my_stepper).target_position;
      - stepper.report_position:
          id: my_stepper
          position: 0
      - stepper.set_target:
          id: my_stepper
          target: 0
      - stepper.set_speed:
          id: my_stepper
          speed: 350 steps/s

# Enable logging
logger:
  level: DEBUG

# This is optional and can be commented out to disable the Web Server
web_server:
  port: 80

# Enable Home Assistant API
api:
  services:
  - service: control_stepper
    variables:
      target: int
    then:
      - stepper.set_target:
          id: my_stepper
          target: !lambda 'return target;'

ota:
  platform: esphome
  password: "9f2ab9aa715f573e2476e75a5ec7f4e7"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Open AIR Valve Config AP"
    password: "ChangeMe@123!"
    
captive_portal:

globals:
  - id: valve_capacity_lookup_table
    type: std::vector<int>
    restore_value: no
    initial_value: '{0,47,66,82,94,106,116,125,134,142,150,158,165,172,178,185,191,197,203,209,215,220,225,231,236,241,246,251,256,261,265,270,275,279,284,288,292,297,301,305,309,314,318,322,326,330,334,338,342,346,350,353,357,361,365,368,372,376,380,383,387,391,394,398,401,405,409,412,416,419,423,426,430,433,437,440,443,447,450,454,457,461,464,467,471,474,478,481,484,488,491,494,498,501,504,508,511,514,518,521,525}'

number:
  - platform: template
    name: "Valve Capacity %"
    id: valve_capacity
    optimistic: true
    restore_value: no
    initial_value: 0
    min_value: 0
    max_value: 100
    step: 10
    mode: slider
    on_value:
      then:
        - stepper.set_target:
            id: my_stepper
            target: !lambda |-
              if (x <= 0) { 
                return 0; 
              } else if(x >= 100) {
                return 525;
              } else if (x > 0 && x < 100) {
                int steps = id(valve_capacity_lookup_table)[x];
                return steps;
              } else {
                return 0;
              }

status_led:
  pin:
    number: GPIO33

uart:
#UART For Sensor 1
-  id: uart_sensor_1
   rx_pin: GPIO25
   tx_pin: GPIO26
   baud_rate: 9600


i2c:
#I2C For Sensor 1
- id: i2c_sensor_1
  sda: GPIO16
  scl: GPIO4
  scan: false
  frequency: 400kHz
  
cover:
  - platform: template
    name: "Valve"
    id: valve
    lambda: |-
      if (id(my_stepper).current_position <= 0) {
        return COVER_CLOSED;
      } else if (id(my_stepper).current_position > 0 && id(my_stepper).current_position <= 100) {
        return COVER_OPEN;
      } else {
        return {};
      }
    open_action:
      - number.set:
          id: valve_capacity
          value: 100
      - stepper.set_target:
          id: my_stepper
          target: 525
    close_action:
      - number.set:
          id: valve_capacity
          value: 0
      - stepper.set_target:
          id: my_stepper
          target: 0

stepper:
  - platform: uln2003
    id: my_stepper
    pin_a: GPIO15
    pin_b: GPIO14
    pin_c: GPIO13
    pin_d: GPIO12
    max_speed: 350 steps/s
    acceleration: inf
    deceleration: inf
    sleep_when_done: true

sensor:
    - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""
    
binary_sensor:
  - platform: gpio
    id: valve_homing_switch
    pin:
      number: GPIO35
      inverted: true #Change this to "false" if you hava a homing Switch pre V1.4.0 valve
    name: "Valve Closed Switch"

switch:
  - platform: restart
    name: "Reboot valve controller to recalibrate"
    
script: !include disconnected-mode.yaml
  # !include disconnected-mode-with-humidity.yaml

interval:
  - interval: 30s
    then:
      - logger.log: "API Connectivity Check for Disconnected Mode"
      - if:
          condition:
            not:
              api.connected:
          then:
            - logger.log: "API disconnected"
            - script.execute: disconnected_mode
          else:
            - logger.log: "API connected"
            - script.stop: disconnected_mode
